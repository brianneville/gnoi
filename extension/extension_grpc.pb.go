// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: extension/extension.proto

package extension

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Extension_ShowExtensions_FullMethodName     = "/gnoi.extension.Extension/ShowExtensions"
	Extension_FinalizeExtensions_FullMethodName = "/gnoi.extension.Extension/FinalizeExtensions"
	Extension_InstallExtension_FullMethodName   = "/gnoi.extension.Extension/InstallExtension"
	Extension_UninstallExtension_FullMethodName = "/gnoi.extension.Extension/UninstallExtension"
)

// ExtensionClient is the client API for Extension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtensionClient interface {
	// Shows the current state of the extensions on the system.
	ShowExtensions(ctx context.Context, in *ShowExtensionsRequest, opts ...grpc.CallOption) (*ShowExtensionsResponse, error)
	// FinalizeExtensions reloads any services on the system for
	// which extensions have been installed but which have not yet been
	// reloaded with those extensions.
	// Please note that this may kill the connection if the service
	// hosting the gRPC server reloads so the server is not guaranteed
	// to return a response here.
	FinalizeExtensions(ctx context.Context, in *FinalizeExtensionsRequest, opts ...grpc.CallOption) (*FinalizeExtensionsResponse, error)
	// InstallExtension installs a new extension on the system.
	// The new extension may be transferred as part of the RPC.
	//
	// Expected workflows are:
	// 1. To transfer a new extension:
	// client ______________________________________ server
	// TransferRequest (with extension_name set) -->
	// TransferRequest (with contents set)       -->
	// .. repeated TransferRequest with contents are sent
	//
	//	until the file is transferred ..
	//
	// TransferRequest (with hash set)           -->
	// .. server verifies hash matches expected ..
	//
	//	              <-- InstallExtensionResponse
	//	(with acknowledgement = TRANSFER_COMPLETE)
	//
	// STREAM END
	//
	// 2. To transfer and install a new extension:
	// client ______________________________________ server
	// TransferRequest (with extension_name set) -->
	// TransferRequest (with contents set)       -->
	// .. repeated TransferRequest with contents are sent
	// until the file is transferred ..
	// TransferRequest (with hash set)           -->
	// .. server verifies hash matches expected ..
	//
	//	              <-- InstallExtensionResponse
	//	(with acknowledgement = TRANSFER_COMPLETE)
	//
	// InstallRequest (with extension_name set)  -->
	// (note, other fields may be set )
	// .. server installs extension according to fields.
	//
	//	             <-- InstallExtensionResponse
	//	(with acknowledgement = INSTALL_COMPLETE)
	//
	// STREAM END
	//
	// 3. To install a pre-existing extension:
	// client ______________________________________ server
	// InstallRequest (with extension_name set)
	// (note, other fields may be set )          -->
	// .. server installs extension according to fields.
	//
	//	             <-- InstallExtensionResponse
	//	(with acknowledgement = INSTALL_COMPLETE)
	//
	// STREAM END
	// Note that all installations will install the extension, but that
	// extension will not be applied until the affected services are reloaded.
	// To reload services after installing extensions, issue a
	// FinalizeExtensions RPC after finishing the InstallExtension RPC.
	InstallExtension(ctx context.Context, opts ...grpc.CallOption) (Extension_InstallExtensionClient, error)
	// UninstallExtension uninstalls an extension.
	// It returns an error if the requested extension is not installed.
	UninstallExtension(ctx context.Context, in *UninstallExtensionRequest, opts ...grpc.CallOption) (*UninstallExtensionResponse, error)
}

type extensionClient struct {
	cc grpc.ClientConnInterface
}

func NewExtensionClient(cc grpc.ClientConnInterface) ExtensionClient {
	return &extensionClient{cc}
}

func (c *extensionClient) ShowExtensions(ctx context.Context, in *ShowExtensionsRequest, opts ...grpc.CallOption) (*ShowExtensionsResponse, error) {
	out := new(ShowExtensionsResponse)
	err := c.cc.Invoke(ctx, Extension_ShowExtensions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionClient) FinalizeExtensions(ctx context.Context, in *FinalizeExtensionsRequest, opts ...grpc.CallOption) (*FinalizeExtensionsResponse, error) {
	out := new(FinalizeExtensionsResponse)
	err := c.cc.Invoke(ctx, Extension_FinalizeExtensions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionClient) InstallExtension(ctx context.Context, opts ...grpc.CallOption) (Extension_InstallExtensionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Extension_ServiceDesc.Streams[0], Extension_InstallExtension_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &extensionInstallExtensionClient{stream}
	return x, nil
}

type Extension_InstallExtensionClient interface {
	Send(*InstallExtensionRequest) error
	Recv() (*InstallExtensionResponse, error)
	grpc.ClientStream
}

type extensionInstallExtensionClient struct {
	grpc.ClientStream
}

func (x *extensionInstallExtensionClient) Send(m *InstallExtensionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *extensionInstallExtensionClient) Recv() (*InstallExtensionResponse, error) {
	m := new(InstallExtensionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *extensionClient) UninstallExtension(ctx context.Context, in *UninstallExtensionRequest, opts ...grpc.CallOption) (*UninstallExtensionResponse, error) {
	out := new(UninstallExtensionResponse)
	err := c.cc.Invoke(ctx, Extension_UninstallExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtensionServer is the server API for Extension service.
// All implementations must embed UnimplementedExtensionServer
// for forward compatibility
type ExtensionServer interface {
	// Shows the current state of the extensions on the system.
	ShowExtensions(context.Context, *ShowExtensionsRequest) (*ShowExtensionsResponse, error)
	// FinalizeExtensions reloads any services on the system for
	// which extensions have been installed but which have not yet been
	// reloaded with those extensions.
	// Please note that this may kill the connection if the service
	// hosting the gRPC server reloads so the server is not guaranteed
	// to return a response here.
	FinalizeExtensions(context.Context, *FinalizeExtensionsRequest) (*FinalizeExtensionsResponse, error)
	// InstallExtension installs a new extension on the system.
	// The new extension may be transferred as part of the RPC.
	//
	// Expected workflows are:
	// 1. To transfer a new extension:
	// client ______________________________________ server
	// TransferRequest (with extension_name set) -->
	// TransferRequest (with contents set)       -->
	// .. repeated TransferRequest with contents are sent
	//
	//	until the file is transferred ..
	//
	// TransferRequest (with hash set)           -->
	// .. server verifies hash matches expected ..
	//
	//	              <-- InstallExtensionResponse
	//	(with acknowledgement = TRANSFER_COMPLETE)
	//
	// STREAM END
	//
	// 2. To transfer and install a new extension:
	// client ______________________________________ server
	// TransferRequest (with extension_name set) -->
	// TransferRequest (with contents set)       -->
	// .. repeated TransferRequest with contents are sent
	// until the file is transferred ..
	// TransferRequest (with hash set)           -->
	// .. server verifies hash matches expected ..
	//
	//	              <-- InstallExtensionResponse
	//	(with acknowledgement = TRANSFER_COMPLETE)
	//
	// InstallRequest (with extension_name set)  -->
	// (note, other fields may be set )
	// .. server installs extension according to fields.
	//
	//	             <-- InstallExtensionResponse
	//	(with acknowledgement = INSTALL_COMPLETE)
	//
	// STREAM END
	//
	// 3. To install a pre-existing extension:
	// client ______________________________________ server
	// InstallRequest (with extension_name set)
	// (note, other fields may be set )          -->
	// .. server installs extension according to fields.
	//
	//	             <-- InstallExtensionResponse
	//	(with acknowledgement = INSTALL_COMPLETE)
	//
	// STREAM END
	// Note that all installations will install the extension, but that
	// extension will not be applied until the affected services are reloaded.
	// To reload services after installing extensions, issue a
	// FinalizeExtensions RPC after finishing the InstallExtension RPC.
	InstallExtension(Extension_InstallExtensionServer) error
	// UninstallExtension uninstalls an extension.
	// It returns an error if the requested extension is not installed.
	UninstallExtension(context.Context, *UninstallExtensionRequest) (*UninstallExtensionResponse, error)
	mustEmbedUnimplementedExtensionServer()
}

// UnimplementedExtensionServer must be embedded to have forward compatible implementations.
type UnimplementedExtensionServer struct {
}

func (UnimplementedExtensionServer) ShowExtensions(context.Context, *ShowExtensionsRequest) (*ShowExtensionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowExtensions not implemented")
}
func (UnimplementedExtensionServer) FinalizeExtensions(context.Context, *FinalizeExtensionsRequest) (*FinalizeExtensionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeExtensions not implemented")
}
func (UnimplementedExtensionServer) InstallExtension(Extension_InstallExtensionServer) error {
	return status.Errorf(codes.Unimplemented, "method InstallExtension not implemented")
}
func (UnimplementedExtensionServer) UninstallExtension(context.Context, *UninstallExtensionRequest) (*UninstallExtensionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallExtension not implemented")
}
func (UnimplementedExtensionServer) mustEmbedUnimplementedExtensionServer() {}

// UnsafeExtensionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtensionServer will
// result in compilation errors.
type UnsafeExtensionServer interface {
	mustEmbedUnimplementedExtensionServer()
}

func RegisterExtensionServer(s grpc.ServiceRegistrar, srv ExtensionServer) {
	s.RegisterService(&Extension_ServiceDesc, srv)
}

func _Extension_ShowExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowExtensionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServer).ShowExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Extension_ShowExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServer).ShowExtensions(ctx, req.(*ShowExtensionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Extension_FinalizeExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeExtensionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServer).FinalizeExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Extension_FinalizeExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServer).FinalizeExtensions(ctx, req.(*FinalizeExtensionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Extension_InstallExtension_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExtensionServer).InstallExtension(&extensionInstallExtensionServer{stream})
}

type Extension_InstallExtensionServer interface {
	Send(*InstallExtensionResponse) error
	Recv() (*InstallExtensionRequest, error)
	grpc.ServerStream
}

type extensionInstallExtensionServer struct {
	grpc.ServerStream
}

func (x *extensionInstallExtensionServer) Send(m *InstallExtensionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *extensionInstallExtensionServer) Recv() (*InstallExtensionRequest, error) {
	m := new(InstallExtensionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Extension_UninstallExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionServer).UninstallExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Extension_UninstallExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionServer).UninstallExtension(ctx, req.(*UninstallExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Extension_ServiceDesc is the grpc.ServiceDesc for Extension service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Extension_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.extension.Extension",
	HandlerType: (*ExtensionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowExtensions",
			Handler:    _Extension_ShowExtensions_Handler,
		},
		{
			MethodName: "FinalizeExtensions",
			Handler:    _Extension_FinalizeExtensions_Handler,
		},
		{
			MethodName: "UninstallExtension",
			Handler:    _Extension_UninstallExtension_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InstallExtension",
			Handler:       _Extension_InstallExtension_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "extension/extension.proto",
}
