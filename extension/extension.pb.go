// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: extension/extension.proto

package extension

import (
	types "github.com/openconfig/gnoi/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShowExtensionsResponse_InstallStatus int32

const (
	// UNSPECIFIED should be treated as an error.
	ShowExtensionsResponse_UNSPECIFIED   ShowExtensionsResponse_InstallStatus = 0
	ShowExtensionsResponse_INSTALLED     ShowExtensionsResponse_InstallStatus = 1
	ShowExtensionsResponse_NOT_INSTALLED ShowExtensionsResponse_InstallStatus = 2
	// This extension was force-installed - checks regarding
	// signature or dependencies may have been ignored
	ShowExtensionsResponse_FORCE_INSTALLED ShowExtensionsResponse_InstallStatus = 3
)

// Enum value maps for ShowExtensionsResponse_InstallStatus.
var (
	ShowExtensionsResponse_InstallStatus_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "INSTALLED",
		2: "NOT_INSTALLED",
		3: "FORCE_INSTALLED",
	}
	ShowExtensionsResponse_InstallStatus_value = map[string]int32{
		"UNSPECIFIED":     0,
		"INSTALLED":       1,
		"NOT_INSTALLED":   2,
		"FORCE_INSTALLED": 3,
	}
)

func (x ShowExtensionsResponse_InstallStatus) Enum() *ShowExtensionsResponse_InstallStatus {
	p := new(ShowExtensionsResponse_InstallStatus)
	*p = x
	return p
}

func (x ShowExtensionsResponse_InstallStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShowExtensionsResponse_InstallStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_extension_extension_proto_enumTypes[0].Descriptor()
}

func (ShowExtensionsResponse_InstallStatus) Type() protoreflect.EnumType {
	return &file_extension_extension_proto_enumTypes[0]
}

func (x ShowExtensionsResponse_InstallStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShowExtensionsResponse_InstallStatus.Descriptor instead.
func (ShowExtensionsResponse_InstallStatus) EnumDescriptor() ([]byte, []int) {
	return file_extension_extension_proto_rawDescGZIP(), []int{1, 0}
}

type InstallExtensionResponse_Operation int32

const (
	InstallExtensionResponse_UNSPECIFIED       InstallExtensionResponse_Operation = 0
	InstallExtensionResponse_TRANSFER_COMPLETE InstallExtensionResponse_Operation = 1
	InstallExtensionResponse_INSTALL_COMPLETE  InstallExtensionResponse_Operation = 2
)

// Enum value maps for InstallExtensionResponse_Operation.
var (
	InstallExtensionResponse_Operation_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "TRANSFER_COMPLETE",
		2: "INSTALL_COMPLETE",
	}
	InstallExtensionResponse_Operation_value = map[string]int32{
		"UNSPECIFIED":       0,
		"TRANSFER_COMPLETE": 1,
		"INSTALL_COMPLETE":  2,
	}
)

func (x InstallExtensionResponse_Operation) Enum() *InstallExtensionResponse_Operation {
	p := new(InstallExtensionResponse_Operation)
	*p = x
	return p
}

func (x InstallExtensionResponse_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstallExtensionResponse_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_extension_extension_proto_enumTypes[1].Descriptor()
}

func (InstallExtensionResponse_Operation) Type() protoreflect.EnumType {
	return &file_extension_extension_proto_enumTypes[1]
}

func (x InstallExtensionResponse_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstallExtensionResponse_Operation.Descriptor instead.
func (InstallExtensionResponse_Operation) EnumDescriptor() ([]byte, []int) {
	return file_extension_extension_proto_rawDescGZIP(), []int{6, 0}
}

type InstallRequest_TrustSource int32

const (
	// UNSPECIFIED should be treated as an error.
	InstallRequest_UNSPECIFIED InstallRequest_TrustSource = 0
	// ANY = disable signature verification. Allows any extension
	// (even one with missing/invalid signature) to be installed
	InstallRequest_ANY InstallRequest_TrustSource = 1
	// MANUFACTURER = trust only extensions which have been signed
	// by the device manufacturer to be installed.
	InstallRequest_MANUFACTURER InstallRequest_TrustSource = 2
)

// Enum value maps for InstallRequest_TrustSource.
var (
	InstallRequest_TrustSource_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ANY",
		2: "MANUFACTURER",
	}
	InstallRequest_TrustSource_value = map[string]int32{
		"UNSPECIFIED":  0,
		"ANY":          1,
		"MANUFACTURER": 2,
	}
)

func (x InstallRequest_TrustSource) Enum() *InstallRequest_TrustSource {
	p := new(InstallRequest_TrustSource)
	*p = x
	return p
}

func (x InstallRequest_TrustSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstallRequest_TrustSource) Descriptor() protoreflect.EnumDescriptor {
	return file_extension_extension_proto_enumTypes[2].Descriptor()
}

func (InstallRequest_TrustSource) Type() protoreflect.EnumType {
	return &file_extension_extension_proto_enumTypes[2]
}

func (x InstallRequest_TrustSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstallRequest_TrustSource.Descriptor instead.
func (InstallRequest_TrustSource) EnumDescriptor() ([]byte, []int) {
	return file_extension_extension_proto_rawDescGZIP(), []int{8, 0}
}

type ShowExtensionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShowExtensionsRequest) Reset() {
	*x = ShowExtensionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extension_extension_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowExtensionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowExtensionsRequest) ProtoMessage() {}

func (x *ShowExtensionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_extension_extension_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowExtensionsRequest.ProtoReflect.Descriptor instead.
func (*ShowExtensionsRequest) Descriptor() ([]byte, []int) {
	return file_extension_extension_proto_rawDescGZIP(), []int{0}
}

type ShowExtensionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extensions []*ShowExtensionsResponse_Extension `protobuf:"bytes,1,rep,name=extensions,proto3" json:"extensions,omitempty"`
	// extension_directory is a directory where extension files are contained.
	ExtensionDirectory string `protobuf:"bytes,2,opt,name=extension_directory,json=extensionDirectory,proto3" json:"extension_directory,omitempty"`
}

func (x *ShowExtensionsResponse) Reset() {
	*x = ShowExtensionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extension_extension_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowExtensionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowExtensionsResponse) ProtoMessage() {}

func (x *ShowExtensionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_extension_extension_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowExtensionsResponse.ProtoReflect.Descriptor instead.
func (*ShowExtensionsResponse) Descriptor() ([]byte, []int) {
	return file_extension_extension_proto_rawDescGZIP(), []int{1}
}

func (x *ShowExtensionsResponse) GetExtensions() []*ShowExtensionsResponse_Extension {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *ShowExtensionsResponse) GetExtensionDirectory() string {
	if x != nil {
		return x.ExtensionDirectory
	}
	return ""
}

type FinalizeExtensionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FinalizeExtensionsRequest) Reset() {
	*x = FinalizeExtensionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extension_extension_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeExtensionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeExtensionsRequest) ProtoMessage() {}

func (x *FinalizeExtensionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_extension_extension_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeExtensionsRequest.ProtoReflect.Descriptor instead.
func (*FinalizeExtensionsRequest) Descriptor() ([]byte, []int) {
	return file_extension_extension_proto_rawDescGZIP(), []int{2}
}

type FinalizeExtensionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FinalizeExtensionsResponse) Reset() {
	*x = FinalizeExtensionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extension_extension_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeExtensionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeExtensionsResponse) ProtoMessage() {}

func (x *FinalizeExtensionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_extension_extension_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeExtensionsResponse.ProtoReflect.Descriptor instead.
func (*FinalizeExtensionsResponse) Descriptor() ([]byte, []int) {
	return file_extension_extension_proto_rawDescGZIP(), []int{3}
}

type UninstallExtensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the extension to be uninstalled
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// a boolean indicating whether we should force uninstalling this extension.
	// if set to true, then ignore conflicts and dependencies when uninstalling.
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *UninstallExtensionRequest) Reset() {
	*x = UninstallExtensionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extension_extension_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UninstallExtensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninstallExtensionRequest) ProtoMessage() {}

func (x *UninstallExtensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_extension_extension_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninstallExtensionRequest.ProtoReflect.Descriptor instead.
func (*UninstallExtensionRequest) Descriptor() ([]byte, []int) {
	return file_extension_extension_proto_rawDescGZIP(), []int{4}
}

func (x *UninstallExtensionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UninstallExtensionRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type UninstallExtensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UninstallExtensionResponse) Reset() {
	*x = UninstallExtensionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extension_extension_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UninstallExtensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninstallExtensionResponse) ProtoMessage() {}

func (x *UninstallExtensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_extension_extension_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninstallExtensionResponse.ProtoReflect.Descriptor instead.
func (*UninstallExtensionResponse) Descriptor() ([]byte, []int) {
	return file_extension_extension_proto_rawDescGZIP(), []int{5}
}

type InstallExtensionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acknowledgement InstallExtensionResponse_Operation `protobuf:"varint,3,opt,name=acknowledgement,proto3,enum=gnoi.extension.InstallExtensionResponse_Operation" json:"acknowledgement,omitempty"`
}

func (x *InstallExtensionResponse) Reset() {
	*x = InstallExtensionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extension_extension_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallExtensionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallExtensionResponse) ProtoMessage() {}

func (x *InstallExtensionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_extension_extension_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallExtensionResponse.ProtoReflect.Descriptor instead.
func (*InstallExtensionResponse) Descriptor() ([]byte, []int) {
	return file_extension_extension_proto_rawDescGZIP(), []int{6}
}

func (x *InstallExtensionResponse) GetAcknowledgement() InstallExtensionResponse_Operation {
	if x != nil {
		return x.Acknowledgement
	}
	return InstallExtensionResponse_UNSPECIFIED
}

type InstallExtensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*InstallExtensionRequest_TransferRequest
	//	*InstallExtensionRequest_InstallRequest
	Request isInstallExtensionRequest_Request `protobuf_oneof:"request"`
}

func (x *InstallExtensionRequest) Reset() {
	*x = InstallExtensionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extension_extension_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallExtensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallExtensionRequest) ProtoMessage() {}

func (x *InstallExtensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_extension_extension_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallExtensionRequest.ProtoReflect.Descriptor instead.
func (*InstallExtensionRequest) Descriptor() ([]byte, []int) {
	return file_extension_extension_proto_rawDescGZIP(), []int{7}
}

func (m *InstallExtensionRequest) GetRequest() isInstallExtensionRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *InstallExtensionRequest) GetTransferRequest() *TransferRequest {
	if x, ok := x.GetRequest().(*InstallExtensionRequest_TransferRequest); ok {
		return x.TransferRequest
	}
	return nil
}

func (x *InstallExtensionRequest) GetInstallRequest() *InstallRequest {
	if x, ok := x.GetRequest().(*InstallExtensionRequest_InstallRequest); ok {
		return x.InstallRequest
	}
	return nil
}

type isInstallExtensionRequest_Request interface {
	isInstallExtensionRequest_Request()
}

type InstallExtensionRequest_TransferRequest struct {
	TransferRequest *TransferRequest `protobuf:"bytes,1,opt,name=transfer_request,json=transferRequest,proto3,oneof"`
}

type InstallExtensionRequest_InstallRequest struct {
	InstallRequest *InstallRequest `protobuf:"bytes,2,opt,name=install_request,json=installRequest,proto3,oneof"`
}

func (*InstallExtensionRequest_TransferRequest) isInstallExtensionRequest_Request() {}

func (*InstallExtensionRequest_InstallRequest) isInstallExtensionRequest_Request() {}

// InstallRequest is a request for installing an extension onto a system.
// The extension is applied to the running configuration.
type InstallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extension_name is the name of the extension to install.
	// This is required because InstallExtension can be called
	// for an extension which is already present on the system
	ExtensionName string `protobuf:"bytes,1,opt,name=extension_name,json=extensionName,proto3" json:"extension_name,omitempty"`
	// if this is true, then the system will also
	// ensure that this extension is loaded on boot/reboot
	LoadAfterBoot bool `protobuf:"varint,3,opt,name=load_after_boot,json=loadAfterBoot,proto3" json:"load_after_boot,omitempty"`
	// if this is true, then the system will ignore
	// any errors which could arise from missing dependencies
	IgnoreDependencyChecks bool `protobuf:"varint,4,opt,name=ignore_dependency_checks,json=ignoreDependencyChecks,proto3" json:"ignore_dependency_checks,omitempty"`
	// Types that are assignable to SignatureVerification:
	//
	//	*InstallRequest_Source
	//	*InstallRequest_SslProfileId
	SignatureVerification isInstallRequest_SignatureVerification `protobuf_oneof:"signature_verification"`
}

func (x *InstallRequest) Reset() {
	*x = InstallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extension_extension_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallRequest) ProtoMessage() {}

func (x *InstallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_extension_extension_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallRequest.ProtoReflect.Descriptor instead.
func (*InstallRequest) Descriptor() ([]byte, []int) {
	return file_extension_extension_proto_rawDescGZIP(), []int{8}
}

func (x *InstallRequest) GetExtensionName() string {
	if x != nil {
		return x.ExtensionName
	}
	return ""
}

func (x *InstallRequest) GetLoadAfterBoot() bool {
	if x != nil {
		return x.LoadAfterBoot
	}
	return false
}

func (x *InstallRequest) GetIgnoreDependencyChecks() bool {
	if x != nil {
		return x.IgnoreDependencyChecks
	}
	return false
}

func (m *InstallRequest) GetSignatureVerification() isInstallRequest_SignatureVerification {
	if m != nil {
		return m.SignatureVerification
	}
	return nil
}

func (x *InstallRequest) GetSource() InstallRequest_TrustSource {
	if x, ok := x.GetSignatureVerification().(*InstallRequest_Source); ok {
		return x.Source
	}
	return InstallRequest_UNSPECIFIED
}

func (x *InstallRequest) GetSslProfileId() string {
	if x, ok := x.GetSignatureVerification().(*InstallRequest_SslProfileId); ok {
		return x.SslProfileId
	}
	return ""
}

type isInstallRequest_SignatureVerification interface {
	isInstallRequest_SignatureVerification()
}

type InstallRequest_Source struct {
	Source InstallRequest_TrustSource `protobuf:"varint,5,opt,name=source,proto3,enum=gnoi.extension.InstallRequest_TrustSource,oneof"`
}

type InstallRequest_SslProfileId struct {
	// trust extensions which are valid according to
	// the SSL profile specified by the ssl_profile_id field.
	// Creating and populating SSL profiles is out of the scope of this
	// service and should be done through some other means (e.g. gNSI Certz).
	SslProfileId string `protobuf:"bytes,6,opt,name=ssl_profile_id,json=sslProfileId,proto3,oneof"`
}

func (*InstallRequest_Source) isInstallRequest_SignatureVerification() {}

func (*InstallRequest_SslProfileId) isInstallRequest_SignatureVerification() {}

type TransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*TransferRequest_ExtensionName
	//	*TransferRequest_Contents
	//	*TransferRequest_Hash
	Request isTransferRequest_Request `protobuf_oneof:"request"`
}

func (x *TransferRequest) Reset() {
	*x = TransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extension_extension_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequest) ProtoMessage() {}

func (x *TransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_extension_extension_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequest.ProtoReflect.Descriptor instead.
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return file_extension_extension_proto_rawDescGZIP(), []int{9}
}

func (m *TransferRequest) GetRequest() isTransferRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *TransferRequest) GetExtensionName() string {
	if x, ok := x.GetRequest().(*TransferRequest_ExtensionName); ok {
		return x.ExtensionName
	}
	return ""
}

func (x *TransferRequest) GetContents() []byte {
	if x, ok := x.GetRequest().(*TransferRequest_Contents); ok {
		return x.Contents
	}
	return nil
}

func (x *TransferRequest) GetHash() *types.HashType {
	if x, ok := x.GetRequest().(*TransferRequest_Hash); ok {
		return x.Hash
	}
	return nil
}

type isTransferRequest_Request interface {
	isTransferRequest_Request()
}

type TransferRequest_ExtensionName struct {
	// name of the extension  (including the file extension)
	ExtensionName string `protobuf:"bytes,1,opt,name=extension_name,json=extensionName,proto3,oneof"`
}

type TransferRequest_Contents struct {
	// raw byte contents to be streamed into the extension file.
	Contents []byte `protobuf:"bytes,2,opt,name=contents,proto3,oneof"`
}

type TransferRequest_Hash struct {
	// hash of the file.
	Hash *types.HashType `protobuf:"bytes,3,opt,name=hash,proto3,oneof"`
}

func (*TransferRequest_ExtensionName) isTransferRequest_Request() {}

func (*TransferRequest_Contents) isTransferRequest_Request() {}

func (*TransferRequest_Hash) isTransferRequest_Request() {}

// an extension may contain multiple packages
type ShowExtensionsResponse_Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Release string `protobuf:"bytes,3,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *ShowExtensionsResponse_Package) Reset() {
	*x = ShowExtensionsResponse_Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extension_extension_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowExtensionsResponse_Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowExtensionsResponse_Package) ProtoMessage() {}

func (x *ShowExtensionsResponse_Package) ProtoReflect() protoreflect.Message {
	mi := &file_extension_extension_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowExtensionsResponse_Package.ProtoReflect.Descriptor instead.
func (*ShowExtensionsResponse_Package) Descriptor() ([]byte, []int) {
	return file_extension_extension_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ShowExtensionsResponse_Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShowExtensionsResponse_Package) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ShowExtensionsResponse_Package) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

type ShowExtensionsResponse_Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                               `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Release       string                               `protobuf:"bytes,3,opt,name=release,proto3" json:"release,omitempty"`
	Description   string                               `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	InstallStatus ShowExtensionsResponse_InstallStatus `protobuf:"varint,6,opt,name=install_status,json=installStatus,proto3,enum=gnoi.extension.ShowExtensionsResponse_InstallStatus" json:"install_status,omitempty"`
	// install_at_boot is true if the extension is set to be
	// installed on next system reload
	InstallAtBoot bool `protobuf:"varint,7,opt,name=install_at_boot,json=installAtBoot,proto3" json:"install_at_boot,omitempty"`
	// bool indicating if this extension has a valid signature
	SignatureValid bool `protobuf:"varint,8,opt,name=signature_valid,json=signatureValid,proto3" json:"signature_valid,omitempty"`
	// available is true if the extension file is still available on the system.
	// the extension may be installed but no longer available if the extension file
	// has been removed.
	Available bool `protobuf:"varint,9,opt,name=available,proto3" json:"available,omitempty"`
	// any errors attached to this extension
	Errors   string                            `protobuf:"bytes,10,opt,name=errors,proto3" json:"errors,omitempty"`
	Packages []*ShowExtensionsResponse_Package `protobuf:"bytes,11,rep,name=packages,proto3" json:"packages,omitempty"`
	// affected_services is a list of the services which can be affected by this
	// extension. This is static information
	AffectedServices []string `protobuf:"bytes,12,rep,name=affected_services,json=affectedServices,proto3" json:"affected_services,omitempty"`
	// services_to_restart is a list of the services which are pending a reload
	// to be finalized.
	// This list will be cleared after a ReloadExtended RPC executes.
	ServicesToRestart []string `protobuf:"bytes,13,rep,name=services_to_restart,json=servicesToRestart,proto3" json:"services_to_restart,omitempty"`
}

func (x *ShowExtensionsResponse_Extension) Reset() {
	*x = ShowExtensionsResponse_Extension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_extension_extension_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowExtensionsResponse_Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowExtensionsResponse_Extension) ProtoMessage() {}

func (x *ShowExtensionsResponse_Extension) ProtoReflect() protoreflect.Message {
	mi := &file_extension_extension_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowExtensionsResponse_Extension.ProtoReflect.Descriptor instead.
func (*ShowExtensionsResponse_Extension) Descriptor() ([]byte, []int) {
	return file_extension_extension_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ShowExtensionsResponse_Extension) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShowExtensionsResponse_Extension) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ShowExtensionsResponse_Extension) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *ShowExtensionsResponse_Extension) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ShowExtensionsResponse_Extension) GetInstallStatus() ShowExtensionsResponse_InstallStatus {
	if x != nil {
		return x.InstallStatus
	}
	return ShowExtensionsResponse_UNSPECIFIED
}

func (x *ShowExtensionsResponse_Extension) GetInstallAtBoot() bool {
	if x != nil {
		return x.InstallAtBoot
	}
	return false
}

func (x *ShowExtensionsResponse_Extension) GetSignatureValid() bool {
	if x != nil {
		return x.SignatureValid
	}
	return false
}

func (x *ShowExtensionsResponse_Extension) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *ShowExtensionsResponse_Extension) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

func (x *ShowExtensionsResponse_Extension) GetPackages() []*ShowExtensionsResponse_Package {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *ShowExtensionsResponse_Extension) GetAffectedServices() []string {
	if x != nil {
		return x.AffectedServices
	}
	return nil
}

func (x *ShowExtensionsResponse_Extension) GetServicesToRestart() []string {
	if x != nil {
		return x.ServicesToRestart
	}
	return nil
}

var File_extension_extension_proto protoreflect.FileDescriptor

var file_extension_extension_proto_rawDesc = []byte{
	0x0a, 0x19, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x17,
	0x0a, 0x15, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xcc, 0x06, 0x0a, 0x16, 0x53, 0x68, 0x6f, 0x77,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x51, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x1a, 0x82, 0x04, 0x0a, 0x09, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5b, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41,
	0x74, 0x42, 0x6f, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x57, 0x0a,
	0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0x1b, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x45, 0x0a, 0x19, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x6e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67,
	0x6e, 0x6f, 0x69, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x49, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c,
	0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x22, 0xbd, 0x01, 0x0a,
	0x17, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdc, 0x02, 0x0a,
	0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x74, 0x12, 0x38,
	0x0a, 0x18, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x73, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x73, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x0b, 0x54, 0x72, 0x75, 0x73, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x4e, 0x55, 0x46, 0x41, 0x43, 0x54, 0x55, 0x52, 0x45, 0x52, 0x10,
	0x02, 0x42, 0x18, 0x0a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0xb1, 0x03,
	0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x0e, 0x53,
	0x68, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x12,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x29, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x10, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x6b, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x2e, 0xd2, 0x3e, 0x05, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x5a, 0x24, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x69, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_extension_extension_proto_rawDescOnce sync.Once
	file_extension_extension_proto_rawDescData = file_extension_extension_proto_rawDesc
)

func file_extension_extension_proto_rawDescGZIP() []byte {
	file_extension_extension_proto_rawDescOnce.Do(func() {
		file_extension_extension_proto_rawDescData = protoimpl.X.CompressGZIP(file_extension_extension_proto_rawDescData)
	})
	return file_extension_extension_proto_rawDescData
}

var file_extension_extension_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_extension_extension_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_extension_extension_proto_goTypes = []interface{}{
	(ShowExtensionsResponse_InstallStatus)(0), // 0: gnoi.extension.ShowExtensionsResponse.InstallStatus
	(InstallExtensionResponse_Operation)(0),   // 1: gnoi.extension.InstallExtensionResponse.Operation
	(InstallRequest_TrustSource)(0),           // 2: gnoi.extension.InstallRequest.TrustSource
	(*ShowExtensionsRequest)(nil),             // 3: gnoi.extension.ShowExtensionsRequest
	(*ShowExtensionsResponse)(nil),            // 4: gnoi.extension.ShowExtensionsResponse
	(*FinalizeExtensionsRequest)(nil),         // 5: gnoi.extension.FinalizeExtensionsRequest
	(*FinalizeExtensionsResponse)(nil),        // 6: gnoi.extension.FinalizeExtensionsResponse
	(*UninstallExtensionRequest)(nil),         // 7: gnoi.extension.UninstallExtensionRequest
	(*UninstallExtensionResponse)(nil),        // 8: gnoi.extension.UninstallExtensionResponse
	(*InstallExtensionResponse)(nil),          // 9: gnoi.extension.InstallExtensionResponse
	(*InstallExtensionRequest)(nil),           // 10: gnoi.extension.InstallExtensionRequest
	(*InstallRequest)(nil),                    // 11: gnoi.extension.InstallRequest
	(*TransferRequest)(nil),                   // 12: gnoi.extension.TransferRequest
	(*ShowExtensionsResponse_Package)(nil),    // 13: gnoi.extension.ShowExtensionsResponse.Package
	(*ShowExtensionsResponse_Extension)(nil),  // 14: gnoi.extension.ShowExtensionsResponse.Extension
	(*types.HashType)(nil),                    // 15: gnoi.types.HashType
}
var file_extension_extension_proto_depIdxs = []int32{
	14, // 0: gnoi.extension.ShowExtensionsResponse.extensions:type_name -> gnoi.extension.ShowExtensionsResponse.Extension
	1,  // 1: gnoi.extension.InstallExtensionResponse.acknowledgement:type_name -> gnoi.extension.InstallExtensionResponse.Operation
	12, // 2: gnoi.extension.InstallExtensionRequest.transfer_request:type_name -> gnoi.extension.TransferRequest
	11, // 3: gnoi.extension.InstallExtensionRequest.install_request:type_name -> gnoi.extension.InstallRequest
	2,  // 4: gnoi.extension.InstallRequest.source:type_name -> gnoi.extension.InstallRequest.TrustSource
	15, // 5: gnoi.extension.TransferRequest.hash:type_name -> gnoi.types.HashType
	0,  // 6: gnoi.extension.ShowExtensionsResponse.Extension.install_status:type_name -> gnoi.extension.ShowExtensionsResponse.InstallStatus
	13, // 7: gnoi.extension.ShowExtensionsResponse.Extension.packages:type_name -> gnoi.extension.ShowExtensionsResponse.Package
	3,  // 8: gnoi.extension.Extension.ShowExtensions:input_type -> gnoi.extension.ShowExtensionsRequest
	5,  // 9: gnoi.extension.Extension.FinalizeExtensions:input_type -> gnoi.extension.FinalizeExtensionsRequest
	10, // 10: gnoi.extension.Extension.InstallExtension:input_type -> gnoi.extension.InstallExtensionRequest
	7,  // 11: gnoi.extension.Extension.UninstallExtension:input_type -> gnoi.extension.UninstallExtensionRequest
	4,  // 12: gnoi.extension.Extension.ShowExtensions:output_type -> gnoi.extension.ShowExtensionsResponse
	6,  // 13: gnoi.extension.Extension.FinalizeExtensions:output_type -> gnoi.extension.FinalizeExtensionsResponse
	9,  // 14: gnoi.extension.Extension.InstallExtension:output_type -> gnoi.extension.InstallExtensionResponse
	8,  // 15: gnoi.extension.Extension.UninstallExtension:output_type -> gnoi.extension.UninstallExtensionResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_extension_extension_proto_init() }
func file_extension_extension_proto_init() {
	if File_extension_extension_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_extension_extension_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowExtensionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extension_extension_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowExtensionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extension_extension_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeExtensionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extension_extension_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeExtensionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extension_extension_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UninstallExtensionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extension_extension_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UninstallExtensionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extension_extension_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallExtensionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extension_extension_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallExtensionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extension_extension_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extension_extension_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extension_extension_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowExtensionsResponse_Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_extension_extension_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowExtensionsResponse_Extension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_extension_extension_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*InstallExtensionRequest_TransferRequest)(nil),
		(*InstallExtensionRequest_InstallRequest)(nil),
	}
	file_extension_extension_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*InstallRequest_Source)(nil),
		(*InstallRequest_SslProfileId)(nil),
	}
	file_extension_extension_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*TransferRequest_ExtensionName)(nil),
		(*TransferRequest_Contents)(nil),
		(*TransferRequest_Hash)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_extension_extension_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_extension_extension_proto_goTypes,
		DependencyIndexes: file_extension_extension_proto_depIdxs,
		EnumInfos:         file_extension_extension_proto_enumTypes,
		MessageInfos:      file_extension_extension_proto_msgTypes,
	}.Build()
	File_extension_extension_proto = out.File
	file_extension_extension_proto_rawDesc = nil
	file_extension_extension_proto_goTypes = nil
	file_extension_extension_proto_depIdxs = nil
}
